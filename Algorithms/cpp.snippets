snippet segtree "a segment tree template"
struct Node {
	// write values stored in node
};

template<int SZ> struct Seg {
	Node tree[4*SZ];

	Node merge(Node a, Node b){
		//merge function
	}
	
	void update(int v, int l, int r, int i, T x) {
		if (i > r || i < l) {
			return;
		} else if (l == r) {
			// init value	
		} else {
			int m = (l + r) / 2;
			update(2 * v + 1, l, m, i, x);
			update(2 * v + 2, m + 1, r, i, x);
			tree[v] = merge(tree[2 * v + 1], tree[2 * v + 2]);
		}
	}

	Node query(int v, int l, int r, int ql, int qr) {
		if (l > qr || r < ql) {
			// max or min value
		} else if (l >= ql && r <= qr) {
			return tree[v];
		} else {
			int m = (l + r) / 2;
			Node a = query(2 * v + 1, l, m, ql, qr);
			Node b = query(2 * v + 2, m + 1, r, ql, qr);
			return merge(a, b);
		}
	}
};
endsnippet

snippet DSU "dsu template"
template < int SZ > struct DSU {
  int p[SZ], sz[SZ];
  void init() {
    for (int i = 0; i < SZ; i++) {
      p[i] = i;
      sz[i] = 1;
    }
  }
  int find(int x) {
    return p[x] = (p[x] == x ? x : find(p[x]));
  }
  void merge(int u, int v) {
    int a = find(u);
    int b = find(v);
    if (a != b) {
      if (sz[a] < sz[b]) {
        swap(a, b);
      }
      p[b] = a;
      sz[a] += sz[b];
    }
  }
}
endsnippet

snippet binpow "mod expo"
ll modexpo(ll a, ll b, ll m) {
  a %= m;
  ll res = 1;
  while (b > 0) {
    if (b & 1)
      res = res * a % m;
    a = a * a % m;
    b >>= 1;
  }
  return res;
}
endsnippet

snippet segtree "Lazy Segment Tree"
template < class T, int SZ > struct LazySeg {
  T tree[SZ], lazy[SZ];
  T merge(T a, T b) {
    return a + b;
  }
  void prop(int v, int l, int r) {
    if (lazy[v] != 0) {
      tree[v] += lazy[v];
      if (l != r) {
        lazy[2 * v + 1] += lazy[v];
        lazy[2 * v + 2] += lazy[v];
      }
      lazy[v] = 0;
    }
  }
  void update(int v, int l, int r, int ql, int qr, int x) {
    if (r < ql || l > qr) {
      return;
    }
    prop(v, l, r);
    if (l >= ql && r <= qr) {
      tree[v] += x;
      if (l != r) {
        lazy[2 * v + 1] += x;
        lazy[2 * v + 2] += x;
      }
      return;
    }
    int m = (l + r) / 2;
    update(2 * v + 1, l, m, ql, qr, x);
    update(2 * v + 2, m + 1, r, ql, qr, x);
    tree[v] = merge(tree[2 * v + 1], tree[2 * v + 2]);
  }

  T query(int v, int l, int r, int ql, int qr) {
    if (l > qr || r < ql) {
      return 0;
    }
    prop(v, l, r);
    if (l >= ql && r <= qr) {
      return tree[v];
    } else {
      int m = (l + r) / 2;
      T a = query(2 * v + 1, l, m, ql, qr);
      T b = query(2 * v + 2, m + 1, r, ql, qr);
      return merge(a, b);
    }
  }
};
endsnippet

snippet LCA "Lowest Common Ancestor"
template < int SZ > struct LCA {
  int depth[SZ];
  int p[SZ][33];
  vector < int > adj[SZ];
  void addEdge(int u, int v) {
    adj[u].push_back(v);
    adj[v].push_back(u);
  }
  void dfs(int v, int par) {
    for (int to: adj[v]) {
      if (to != par) {
        p[to][0] = v;
        depth[to] = depth[v] + 1;
        dfs(to, v);
      }
    }
  }
  void precomp() {
    for (int i = 0; i < SZ; i++) {
      for (int j = 0; j < 32; j++) {
        p[i][j] = -1;
      }
    }
    p[0][0] = 0;
    dfs(0, -1);
    for (int j = 1; j < 32; j++) {
      for (int i = 0; i < SZ; i++) {
        if (p[i][j - 1] == -1) {
          p[i][j] = -1;
        } else {
          p[i][j] = p[p[i][j - 1]][j - 1];
        }
      }
    }
  }
  int query(int a, int b) {
    if (depth[a] > depth[b]) {
      swap(a, b);
    }
    int lift = depth[b] - depth[a];
    for (int j = 31; j >= 0; j--) {
      if (lift & (1 << j)) {
        b = p[b][j];
      }
    }
    for (int j = 31; j >= 0; j--) {
      if (p[a][j] != p[b][j]) {
        a = p[a][j];
        b = p[b][j];
      }
    }
    return (a == b) ? a : p[a][0];
  }
};
endsnippet

snippet Hash "hashing"
struct Hash {
  ll hsh[MX], invs[MX], mxp[MX];
  ll modexpo(ll a, ll b, ll m) {
    a %= m;
    ll res = 1;
    while (b > 0) {
      if (b & 1)
        res = res * a % m;
      a = a * a % m;
      b >>= 1;
    }
    return res;
  }

  ll inv(ll b) {
    return modexpo(modexpo(BASE, b, MOD), MOD - 2, MOD);
  }

  void precomp(string s) {
    hsh[0] = s[0] - 'a';
    mxp[0] = 1;
    invs[0] = 1;
    invs[1] = modexpo(BASE, MOD - 2, MOD);
    f0x(i, 2, MX) invs[i] = (invs[i - 1] * invs[1]) % MOD;
    f0x(i, 1, sz(s)) {
      mxp[i] = (mxp[i - 1] * BASE) % MOD;
      hsh[i] = (hsh[i - 1] + mxp[i] * (s[i] - 'a')) % MOD;
    }
    return;
  }

  ll qry(int l, int r) {
    ll lft = (l == 0 ? 0 LL : hsh[l - 1]);
    return ((((hsh[r] - lft) + MOD) % MOD) * invs[l]) % MOD;
  }
};
endsnippet

snippet rng "random"
mt19937 rnd(chrono::high_resolution_clock::now().time_since_epoch().count());
endsnippet

snippet debug "debugging template"
namespace output {
  void pr(int x) {
    cout << x;
  }
  void pr(long x) {
    cout << x;
  }
  void pr(ll x) {
    cout << x;
  }
  void pr(unsigned x) {
    cout << x;
  }
  void pr(unsigned long x) {
    cout << x;
  }
  void pr(unsigned long long x) {
    cout << x;
  }
  void pr(float x) {
    cout << x;
  }
  void pr(double x) {
    cout << x;
  }
  void pr(long double x) {
    cout << x;
  }
  void pr(char x) {
    cout << x;
  }
  void pr(const char * x) {
    cout << x;
  }
  void pr(const string & x) {
    cout << x;
  }
  void pr(bool x) {
    pr(x ? "true" : "false");
  }

  template < class T1, class T2 > void pr(const pair < T1, T2 > & x);
  template < class T > void pr(const T & x);

  template < class T, class...Ts > void pr(const T & t,
    const Ts & ...ts) {
    pr(t);
    pr(ts...);
  }
  template < class T1, class T2 > void pr(const pair < T1, T2 > & x) {
    pr("{", x.f, ", ", x.s, "}");
  }
  template < class T > void pr(const T & x) {
    pr("{"); // const iterator needed for vector<bool>
    bool fst = 1;
    for (const auto & a: x) pr(!fst ? ", " : "", a), fst = 0;
    pr("}");
  }

  void ps() {
    pr("\n");
  } // print w/ spaces
  template < class T, class...Ts > void ps(const T & t,
    const Ts & ...ts) {
    pr(t);
    if (sizeof...(ts)) pr(" ");
    ps(ts...);
  }

  void pc() {
    cout << "]" << endl;
  } // debug w/ commas
  template < class T, class...Ts > void pc(const T & t,
    const Ts & ...ts) {
    pr(t);
    if (sizeof...(ts)) pr(", ");
    pc(ts...);
  }
  #define dbg(x...) pr("[", #x, "] = ["), pc(x);
}

#ifdef LOCAL
using namespace output;
#endif
endsnippet

snippet matrix "matrix template"
template < int SZ, int MOD > struct Matrix {
  ll mat[SZ][SZ];
  int sz = SZ;
  Matrix() {
    memset(mat, 0, sizeof(mat));
  }
  Matrix operator * (const Matrix & mat2) {
    Matrix res;
    for (int i = 0; i < SZ; i++) {
      for (int j = 0; j < SZ; j++) {
        for (int k = 0; k < SZ; k++) {
          res.mat[i][j] += mat[i][k] * mat2.mat[k][j];
          if (res.mat[i][j] >= MOD) {
            res.mat[i][j] %= MOD;
          }
        }
      }
    }
    return res;
  }
  ll * operator[](const int & i) {
    return mat[i];
  }
  Matrix id() {
    Matrix nmat;
    for (int i = 0; i < SZ; i++) {
      nmat.mat[i][i] = 1;
    }
    return nmat;
  };
  Matrix pow(Matrix & a, ll p) {
    Matrix res = id();
    while (p) {
      if (p & 1) res = res * a;
      a = a * a;
      p >>= 1;
    }
    return res;
  }
  vector < ll > mult_v(const vector < ll > & a,
    const Matrix & b) {
    assert(sz(a) == b.sz);
    vector < ll > res(sz(a));
    for (int i = 0; i < b.sz; i++) {
      for (int j = 0; j < sz(a); j++) {
        res[i] += (a[j] * b.mat[i][j]);
        if (res[i] >= MOD) {
          res[i] %= MOD;
        }
      }
    }
    return res;
  }
};
endsnippet

snippet frac "fraction class"
struct fr{
    __int128 x, y;

    fr(__int128 X = 0, __int128 Y = 1){
        x = X, y = Y;
        ll g = __gcd(x, y);
        x /= g, y /= g;
    }

    friend fr operator+(fr a, fr b){
        return fr(a.x * b.y + b.x * a.y, a.y * b.y);
    }

    friend fr operator-(fr a, fr b){
        return fr(a.x * b.y - b.x * a.y, a.y * b.y);
    }

    friend fr operator*(fr a, fr b){
        return fr(a.x * b.x, a.y * b.y);
    }

    friend fr operator/(fr a, fr b){
        return fr(a.x * b.y, a.y * b.x);
    }

    friend bool operator<(fr a, fr b){
        return a.x * b.y < b.x * a.y;
    }
};
endsnippet

snippet hashtable "gp hash table"
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
gp_hash_table<int, int> table;
endsnippet

snippet fenwick "binary indexed tree"
template<class T, int SZ> struct BIT {
    T bit[SZ + 1];
    void upd(int p, int x) {
        for (; p <= SZ; p += (p & -p)) bit[p] += x;
    }
    T sum(int r) {
        T res = 0;
        for (; r; r -= (r & -r)) res += bit[r];
        return res;
    }
    T query(int l, int r) {
        return sum(r) - sum(l - 1); 
    }
};
endsnippet
